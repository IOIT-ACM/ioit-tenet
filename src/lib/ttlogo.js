/* eslint-disable react-hooks/exhaustive-deps */
/* eslint-disable @typescript-eslint/no-unsafe-argument */
/* eslint-disable @typescript-eslint/no-unsafe-call */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable react/display-name */
/* eslint-disable @typescript-eslint/ban-ts-comment */
// @ts-nocheck
/* eslint-disable @typescript-eslint/no-unsafe-assignment */

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { forwardRef, useEffect } from 'react';
import * as THREE from 'three';
import { useStore } from '@/store';
import { useGLTF } from '@react-three/drei';
import { useLoader, useThree } from '@react-three/fiber';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';

export const TTLogo = forwardRef((props, ref) => {
  const { scene } = useThree();
  const gltf = useLoader(GLTFLoader, '/models/TTLogoSharp.glb');
  const texture = useLoader(THREE.TextureLoader, '/models/texture.png');
  const setSceneLoading = useStore((state) => state.setSceneLoading);

  useEffect(() => {
    if (gltf) {
      setSceneLoading(false);
      gltf.scene.traverse((child) => {
        if (child instanceof THREE.Mesh) {
          child.material.map = texture;
          child.material.needsUpdate = true;
        }
      });
      scene.add(gltf.scene);
    }
    return () => {
      scene.remove(gltf.scene);
    };
  }, [gltf, scene, texture]);

  return <primitive object={gltf.scene} ref={ref} {...props} />;
});

TTLogo.displayName = 'TTLogo';

useGLTF.preload('/models/TTLogoSharp.glb');
